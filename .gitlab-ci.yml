# Secrets should never be versioned.
include:
  - template: Security/Secret-Detection.gitlab-ci.yml


stages:
  - prepare
  - test
  - build
#  - publish

variables:
  DOCKER_IMAGE_NAME: 'registry.cytom.in/cm/rnd/cytomine/products/entreprise-edition-teaching/core-ee'
  ENTRYPOINT_SCRIPTS_VERSION: '1.3.0'
  GRADLE_VERSION: '7.2-jdk17-alpine'
  OPENJDK_VERSION: '17-slim-bullseye'

#  # cache gradle working directory
#  GRADLE_USER_HOME: /cache/.gradle
#  POSTGRES_USER: docker
#  POSTGRES_PASSWORD: docker
#  POSTGRES_DB: docker
#  MONGO_INITDB_ROOT_USERNAME: mongoadmin
#  MONGO_INITDB_ROOT_PASSWORD: secret
#  MONGO_INITDB_DATABASE: cytomine
  #DOCKER_TMP_IMAGE_NAME: $CI_PIPELINE_ID:latest
  #DOCKER_TMP_JAR_IMAGE_NAME: $CI_PIPELINE_ID-jar-builder:latest

# variable to register in project:
# - SCRIPTS_REPO_ACCESS_TOKEN_NAME: access token name for docker-entrypoint-scripts repo
# - SCRIPTS_REPO_ACCESS_TOKEN_VALUE: access token value for docker-entrypoint-scripts repo
# - SCRIPTS_REPO_URL: git url (no scheme/protocol) of the docker-entrypoint-scripts repo

default:
  tags:
    - docker

lint-dockerfiles:
  stage: prepare
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/hadolint/hadolint:latest-alpine
  # Uncomment to silent some warnings if needed
  #variables:
  #  HADOLINT_OPT: --ignore DL3008
  script:
    - hadolint ${HADOLINT_OPT} Dockerfile
  rules:
    - changes:
        - docker/Dockerfile
      when: always

    # If the Dockerfile has not been changed, this job can be skipped
    - when: never
      allow_failure: true

make-version-name:
  stage: prepare
  # regex check does not work with /bin/sh because of parenthesis so we need /bin/bash here
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bash:5.2.15-alpine3.16
  script:
    # TODO: reuse the tag regexp common job/rule
    - | # If no tag has been pushed ($CI_COMMIT_TAG is empty), name it as SNAPSHOT
      if [ -z ${CI_COMMIT_TAG} ]; then
        echo "CM_VERSION=${CI_COMMIT_BRANCH}" > .env
      else
        # Else use the tag
        echo "CM_VERSION=${CI_COMMIT_TAG}" > .env
      fi
    - cat .env
  artifacts:
    reports:
      dotenv: .env

#run-junit:
#  stage: test
#  image: gradle:7.4.2-jdk17-alpine
#  services:
#    - alias: postgres
#      name: registry.cytom.in/cm/rnd/cytomine/tools/envs/postgis:15-3.3-alpine-1.2.0
#    - alias: mongodb
#      name: mongo:4.4.18-focal
#    - alias: rabbitmq
#      name: rabbitmq:3.10
#    - alias: ldap
#      name: registry.cytom.in/cm/rnd/cytomine/tools/envs/ldap:0.5.5-0.0.2
#  script:
#    - export GRADLE_USER_HOME=$GRADLE_USER_HOME
#    - sed -i -- "s/localhost:5433/postgres:5432/g" src/test/resources/application.yml
#    - "sed -i -- 's/host: 127.0.0.1/host: mongodb/g' src/test/resources/application.yml"
#    - "sed -i -- 's/port: 27018/port: 27017/g' src/test/resources/application.yml"
#    - sed -i -- "s/127.0.0.1:390/ldap:389/g" src/test/resources/application.yml
#    - sed -i -- "s/127.0.0.1:390/ldap:389/g" src/test/java/be/cytomine/security/LdapClientTests.java
#    # test log too large for gitlab if executed at 'debug' log level
#    - sed -i -- "s/name=\"be.cytomine\" level=\"debug\"/name=\"be.cytomine\" level=\"info\"/g" src/test/resources/logback-test.xml
#    - gradle :test --no-daemon
#  artifacts:
#    reports:
#      junit: build/test-results/test/**/TEST-*.xml
#      # TODO integrate code coverage

#build-jar:
#  stage: build
#  image: docker:latest
#  rules:
#    - if: $CI_COMMIT_TAG
#  needs:
#    # no dependence on junit tests success. This allow for build
#    # stage jobs to run in parallel with tests. If test fails,
#    # publish jobs are aborted
#    - job: make-version-name
#      artifacts: true
#  script:
#    - docker build --build-arg CORE_VERSION=$CM_VERSION -t $DOCKER_TMP_JAR_IMAGE_NAME -f docker/Dockerfile --target jar-builder .
#    - docker run --name $CI_PIPELINE_ID-builder-container -t $DOCKER_TMP_JAR_IMAGE_NAME
#    - mkdir -p build/libs/
#    - docker cp $CI_PIPELINE_ID-builder-container:/app/build/libs/cytomine.jar build/libs/cytomine-$CM_VERSION.jar
#  after_script:
#    - docker rm $CI_PIPELINE_ID-builder-container || true
#    - docker rmi $DOCKER_TMP_JAR_IMAGE_NAME
#  artifacts:
#    when: on_success
#    expire_in: never
#    paths:
#      - build/libs/cytomine-*.jar

#build-docker-image:
#  stage: build
#  image: docker:latest
#  needs:
#    - job: build-jar
#      artifacts: false
#    - job: make-version-name
#      artifacts: true
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - docker build --build-arg CORE_VERSION=$CM_VERSION -t $DOCKER_TMP_IMAGE_NAME -f docker/Dockerfile .
#    - echo "Built docker image ${DOCKER_TMP_IMAGE_NAME} with "

build-push-docker-image:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:latest
  needs:
    - job: make-version-name
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Log in to Gitlab docker registry"
    - mkdir -p ~/.docker
    - echo ${DOCKER_AUTH_CONFIG} > ~/.docker/config.json

    - echo "Build the docker image ${DOCKER_IMAGE_NAME}:${CM_VERSION}"
    - |
      docker build \
        --build-arg CORE_VERSION=${CM_VERSION} \
        --build-arg CORE_REVISION=${CI_COMMIT_SHORT_SHA} \
        --build-arg ENTRYPOINT_SCRIPTS_VERSION=${ENTRYPOINT_SCRIPTS_VERSION} \
        --build-arg GRADLE_VERSION=${GRADLE_VERSION} \
        --build-arg OPENJDK_VERSION=${OPENJDK_VERSION} \
        -t ${DOCKER_IMAGE_NAME}:${CM_VERSION} \
        -t ${DOCKER_IMAGE_NAME}:latest \
        -f docker/Dockerfile \
        .

    - echo "Pushing docker image ${DOCKER_IMAGE_NAME}:${CM_VERSION} and ${DOCKER_IMAGE_NAME}:latest"
    - docker push ${DOCKER_IMAGE_NAME}:${CM_VERSION}
    - docker push ${DOCKER_IMAGE_NAME}:latest
    - echo "Successfully pushed docker image ${DOCKER_IMAGE_NAME}:${CM_VERSION} and ${DOCKER_IMAGE_NAME}:latest"

#publish-jar:
#  stage: publish
#  image: alpine:latest
#  rules:
#    - if: $CI_COMMIT_TAG
#  needs:
#    - job: make-version-name
#      artifacts: true
#    - job: build-jar
#      artifacts: true
#  script:
#    - echo "TODO upload somehwere"

#create-release:
#  stage: publish
#  image: registry.gitlab.com/gitlab-org/release-cli:latest
#  rules:
#    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^ee[trd]-.*$/
#  needs:
#    - job: publish-jar
#      artifacts: false
#    - job: make-version-name
#      artifacts: true
#    - job: publish-docker-image
#      artifacts: false
#  release:
#    tag_name: '$CI_COMMIT_TAG'
#    name: 'Release $CI_COMMIT_TAG'
#    # TODO add jar link
#    description: >
#      ## Release $CI_COMMIT_TAG

#      Docker image: $CI_REGISTRY_IMAGE:$CM_VERSION_NAME
#  script:
#    - echo "Creating a release"